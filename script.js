// Constants for Configuration
const BASE_WIN_RATE = 50;
const MIN_WIN_RATE = 10;
const MAX_BET = 100;
const MIN_BET = 10;
const SPIN_DELAY = 500; // Delay between spins during AutoPlay

// Symbol Class to Create Symbol Objects
class Symbol {
    constructor(type, emoji, baseProbability, payout) {
        this.type = type;
        this.emoji = emoji;
        this.baseProbability = baseProbability;
        this.currentProbability = baseProbability;
        this.payout = payout;
    }
}

// Reel Class to Manage Each Reel
class Reel {
    constructor(symbols) {
        this.symbols = symbols;
        this.reel = this.generateReel();
    }

    generateReel() {
        let reel = [];
        let weightedSymbols = [];
        for (let symbol of this.symbols) {
            for (let i = 0; i < symbol.currentProbability; i++) {
                weightedSymbols.push(symbol);
            }
        }
        for (let i = 0; i < 50; i++) {
            let randomIndex = Math.floor(Math.random() * weightedSymbols.length);
            reel.push(weightedSymbols[randomIndex]);
        }
        return reel;
    }

    getVisibleSymbols(startIndex, count = 5) {
        return this.reel.slice(startIndex, startIndex + count);
    }

    setWinningCombination(symbol, startIndex = 0) {
        for (let i = startIndex; i < startIndex + 5; i++) {
            this.reel[i % this.reel.length] = symbol;
        }
    }

    updateReel() {
        this.reel = this.generateReel();
    }
}

// SlotMachine Class to Control the Game Logic
class SlotMachine {
    constructor(reels, paylines, balance, bet, winRate) {
        this.reels = reels;
        this.paylines = paylines;
        this.balance = balance;
        this.bet = bet;
        this.win = 0;
        this.spinning = false;
        this.autoSpinning = false;
        this.winRate = winRate;
        this.maxWinningPaylines = 3;
        this.updateSymbolProbabilities();
    }

    setWinRate(rate) {
        this.winRate = rate;
        this.updateSymbolProbabilities();
    }

    updateSymbolProbabilities() {
        const rateFactor = this.winRate / BASE_WIN_RATE;
        for (let symbol of symbols) {
            if (symbol.payout >= 50) {
                symbol.currentProbability = Math.min(symbol.baseProbability * rateFactor * 2, 100);
            } else {
                symbol.currentProbability = symbol.baseProbability / rateFactor;
            }
            if (symbol.currentProbability < 5) {
                symbol.currentProbability = 5;
            }
        }
        for (let reel of this.reels) {
            reel.updateReel();
        }
    }

    displayInitialSymbols() {
        for (let i = 0; i < this.reels.length; i++) {
            this.displaySymbols(i, 0);
        }
    }

    displaySymbols(reelIndex, startIndex) {
        const reelElement = document.getElementById(`reel${reelIndex + 1}`);
        reelElement.innerHTML = '';
        let symbolContainer = document.createElement('div');
        symbolContainer.className = 'symbol-container';
        let reel = this.reels[reelIndex].reel;
        for (let i = 0; i < 5; i++) {
            let symbol = reel[(startIndex + i) % reel.length];
            let symbolDiv = document.createElement('div');
            symbolDiv.className = 'symbol';
            symbolDiv.innerHTML = symbol.emoji;
            symbolContainer.appendChild(symbolDiv);
        }
        reelElement.appendChild(symbolContainer);
    }

    spinReels() {
        if (this.spinning) return;
        this.spinning = true;
        this.balance -= this.bet;
        this.win = 0;
        clearHighlight();
        updateInfo(this.balance, this.bet, this.win, this.winRate);
        let promises = [];
        let grid = [];
        for (let i = 0; i < this.reels.length; i++) {
            promises.push(this.startSpinning(i));
        }
        Promise.all(promises).then(results => {
            grid = results;
            this.checkWin(grid);
            this.spinning = false;
            updateInfo(this.balance, this.bet, this.win, this.winRate);
            if (this.autoSpinning && this.balance >= this.bet) {
                setTimeout(() => this.spinReels(), SPIN_DELAY);
            }
        }).catch(error => {
            console.error("Error during reel spinning:", error);
            this.spinning = false;
        });
    }

    startSpinning(reelIndex) {
        const reelElement = document.getElementById(`reel${reelIndex + 1}`);
        reelElement.innerHTML = '';
        let result = [];
        let reel = this.reels[reelIndex].reel;
        let startIndex = Math.floor(Math.random() * (reel.length - 5));
        let symbolContainer = document.createElement('div');
        symbolContainer.className = 'symbol-container smooth-spin';
        for (let i = 0; i < 5; i++) {
            result.push(reel[(startIndex + i) % reel.length]);
        }
        for (let i = 0; i < 50; i++) {
            let symbol = reel[i % reel.length];
            let symbolDiv = document.createElement('div');
            symbolDiv.className = 'symbol';
            symbolDiv.innerHTML = symbol.emoji;
            symbolContainer.appendChild(symbolDiv);
        }
        reelElement.appendChild(symbolContainer);
        reelElement.style.transition = 'none';
        symbolContainer.style.transform = 'translateY(0px)';
        void reelElement.offsetHeight;
        let stopIndex = (startIndex + 5) % reel.length;
        let stopPosition = -80 * stopIndex;
        return new Promise(resolve => {
            symbolContainer.style.transition = `transform 1s cubic-bezier(0.33, 1, 0.68, 1)`;
            symbolContainer.style.transform = `translateY(${stopPosition}px)`;
            setTimeout(() => {
                this.renderVisibleSymbols(reelIndex, stopIndex, result);
                resolve(result);
            }, 1000);
        });
    }

    renderVisibleSymbols(reelIndex, stopIndex, result) {
        const reelElement = document.getElementById(`reel${reelIndex + 1}`);
        reelElement.innerHTML = '';
        let symbolContainer = document.createElement('div');
        symbolContainer.className = 'symbol-container';
        for (let i = 0; i < 5; i++) {
            let symbol = result[i];
            let symbolDiv = document.createElement('div');
            symbolDiv.className = 'symbol fade-in';
            symbolDiv.innerHTML = symbol.emoji;
            symbolContainer.appendChild(symbolDiv);
        }
        reelElement.appendChild(symbolContainer);
    }

    ensureWinningSpin() {
        let winningCombinations = Math.floor(this.winRate / 10);
        for (let i = 0; i < winningCombinations; i++) {
            let winningLine = this.paylines[Math.floor(Math.random() * this.paylines.length)];
            let randomSymbol = symbols.find(sym => sym.payout >= 50);
            for (let pos of winningLine) {
                this.reels[pos[1]].setWinningCombination(randomSymbol, pos[0]);
            }
        }
    }

    checkWin(grid) {
        if (!grid || !Array.isArray(grid) || grid.length !== 5) {
            console.error("Invalid grid structure:", grid);
            return;
        }
        let winningLines = [];
        let totalWin = 0;
        let winningLineCount = 0;
        for (let line of this.paylines) {
            let firstSymbol = grid[line[0][0]]?.[line[0][1]]?.type;
            let isWinningLine = true;
            for (let pos of line) {
                let currentSymbol = grid[pos[0]]?.[pos[1]]?.type;
                if (!currentSymbol || currentSymbol !== firstSymbol) {
                    isWinningLine = false;
                    break;
                }
            }
            if (isWinningLine) {
                winningLineCount++;
                if (winningLineCount > this.maxWinningPaylines) {
                    console.log("Reached maximum number of winning paylines for this spin.");
                    break;
                }
                let payout = (symbols.find(sym => sym.type === firstSymbol).payout || 0) * this.bet;
                this.win += payout;
                totalWin += payout;
                winningLines.push(line);
                console.log(`Winning Payline: ${line.map(pos => `[Row ${pos[0] + 1}, Reel ${pos[1] + 1}]`).join(' -> ')}, Payout: $${payout}`);
            }
        }
        this.balance += totalWin;
        highlightWinningSymbols(grid, winningLines);
    }
}

// Symbol Definitions with Higher Probabilities and Payouts
const symbols = [
    new Symbol('S1', 'üíé', 20, 100),
    new Symbol('S2', 'üçÄ', 30, 80),
    new Symbol('S3', 'üçí', 30, 60),
    new Symbol('S4', 'üçã', 25, 40),
    new Symbol('S5', 'üçá', 25, 30),
    new Symbol('S6', 'üçâ', 20, 20),
    new Symbol('S7', 'üîî', 15, 10),
    new Symbol('S8', 'üçì', 18, 70),
    new Symbol('S9', 'üçç', 18, 50),
    new Symbol('S10', 'ü•ù', 15, 25),
    new Symbol('WILD', '‚≠ê', 30, 50),
    new Symbol('SCATTER', 'üé∞', 15, 0)
];

// Paylines with Winning Patterns
const paylines = [
    [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4]],
    [[1, 0], [1, 1], [1, 2], [1, 3], [1, 4]],
    [[2, 0], [2, 1], [2, 2], [2, 3], [2, 4]],
    [[3, 0], [3, 1], [3, 2], [3, 3], [3, 4]],
    [[4, 0], [4, 1], [4, 2], [4, 3], [4, 4]],
    [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0]],
    [[0, 1], [1, 1], [2, 1], [3, 1], [4, 1]],
    [[0, 2], [1, 2], [2, 2], [3, 2], [4, 2]],
    [[0, 3], [1, 3], [2, 3], [3, 3], [4, 3]],
    [[0, 4], [1, 4], [2, 4], [3, 4], [4, 4]],
    [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]],
    [[0, 4], [1, 3], [2, 2], [3, 1], [4, 0]],
    [[0, 0], [1, 1], [4, 2], [1, 3], [0, 4]],
    [[4, 0], [1, 1], [0, 2], [1, 3], [4, 4]],
    [[0, 0], [2, 1], [4, 2], [2, 3], [0, 4]],
    [[4, 0], [2, 1], [0, 2], [2, 3], [4, 4]],
    [[0, 0], [3, 1], [4, 2], [3, 3], [0, 4]],
    [[4, 0], [3, 1], [0, 2], [3, 3], [4, 4]],
    [[0, 0], [4, 1], [0, 2], [4, 3], [0, 4]],
    [[4, 0], [0, 1], [4, 2], [0, 3], [4, 4]],
    [[1, 0], [3, 1], [1, 2], [3, 3], [1, 4]],
    [[3, 0], [1, 1], [3, 2], [1, 3], [3, 4]],
    [[2, 0], [2, 1], [2, 2], [2, 3], [2, 4]],
    [[2, 0], [2, 1], [2, 2], [2, 3], [2, 4]],
    [[3, 0], [1, 1], [3, 2], [1, 3], [3, 4]],
    [[1, 0], [3, 1], [1, 2], [3, 3], [1, 4]],
    [[4, 0], [0, 1], [4, 2], [0, 3], [4, 4]],
    [[0, 0], [4, 1], [0, 2], [4, 3], [0, 4]],
    [[0, 0], [3, 1], [4, 2], [0, 3], [1, 4]],
    [[1, 0], [4, 1], [4, 2], [2, 3], [2, 4]],
    [[3, 0], [2, 1], [0, 2], [4, 3], [0, 4]],
    [[4, 0], [1, 1], [4, 2], [4, 3], [1, 4]],
    [[3, 0], [3, 1], [3, 2], [2, 3], [1, 4]],
    [[0, 0], [1, 1], [4, 2], [2, 3], [2, 4]],
    [[1, 0], [0, 1], [0, 2], [0, 3], [1, 4]],
    [[0, 0], [0, 1], [1, 2], [2, 3], [1, 4]],
    [[1, 0], [0, 1], [3, 2], [4, 3], [0, 4]],
    [[1, 0], [1, 1], [0, 2], [4, 3], [3, 4]],
    [[2, 0], [1, 1], [0, 2], [2, 3], [2, 4]],
    [[4, 0], [3, 1], [4, 2], [3, 3], [1, 4]],
    [[2, 0], [0, 1], [1, 2], [2, 3], [1, 4]],
    [[1, 0], [1, 1], [3, 2], [4, 3], [2, 4]],
    [[4, 0], [1, 1], [3, 2], [1, 3], [2, 4]],
    [[3, 0], [4, 1], [3, 2], [0, 3], [4, 4]],
    [[1, 0], [3, 1], [3, 2], [2, 3], [1, 4]],
    [[3, 0], [1, 1], [4, 2], [0, 3], [4, 4]],
    [[3, 0], [2, 1], [3, 2], [1, 3], [4, 4]],
    [[2, 0], [4, 1], [2, 2], [4, 3], [1, 4]],
    [[3, 0], [3, 1], [3, 2], [1, 3], [4, 4]],
    [[4, 0], [3, 1], [2, 2], [1, 3], [0, 4]],
    [[0, 0], [4, 1], [4, 2], [1, 3], [0, 4]],
    [[4, 0], [3, 1], [1, 2], [2, 3], [0, 4]],
    [[3, 0], [4, 1], [0, 2], [4, 3], [2, 4]],
    [[0, 0], [0, 1], [2, 2], [0, 3], [2, 4]],
    [[4, 0], [4, 1], [4, 2], [4, 3], [3, 4]],
    [[3, 0], [1, 1], [2, 2], [2, 3], [1, 4]],
    [[0, 0], [3, 1], [0, 2], [1, 3], [2, 4]],
    [[1, 0], [3, 1], [0, 2], [1, 3], [1, 4]],
    [[2, 0], [4, 1], [4, 2], [3, 3], [4, 4]],
    [[3, 0], [0, 1], [3, 2], [3, 3], [0, 4]],
    [[3, 0], [1, 1], [0, 2], [2, 3], [2, 4]],
    [[0, 0], [4, 1], [0, 2], [0, 3], [2, 4]],
    [[0, 0], [4, 1], [2, 2], [2, 3], [3, 4]],
    [[0, 0], [1, 1], [3, 2], [3, 3], [4, 4]],
    [[3, 0], [1, 1], [3, 2], [0, 3], [3, 4]],
    [[3, 0], [1, 1], [3, 2], [3, 3], [3, 4]],
    [[2, 0], [2, 1], [4, 2], [4, 3], [4, 4]],
    [[4, 0], [1, 1], [3, 2], [3, 3], [0, 4]],
    [[2, 0], [2, 1], [3, 2], [2, 3], [0, 4]],
    [[4, 0], [2, 1], [4, 2], [0, 3], [2, 4]],
    [[2, 0], [4, 1], [0, 2], [2, 3], [0, 4]],
    [[3, 0], [2, 1], [4, 2], [3, 3], [3, 4]],
    [[1, 0], [1, 1], [4, 2], [2, 3], [4, 4]],
    [[3, 0], [1, 1], [3, 2], [4, 3], [4, 4]],
    [[1, 0], [3, 1], [2, 2], [2, 3], [4, 4]],
    [[1, 0], [4, 1], [4, 2], [1, 3], [4, 4]],
    [[3, 0], [2, 1], [2, 2], [1, 3], [2, 4]],
    [[0, 0], [3, 1], [0, 2], [0, 3], [3, 4]],
    [[2, 0], [4, 1], [3, 2], [0, 3], [0, 4]],
    [[1, 0], [1, 1], [1, 2], [2, 3], [4, 4]],
    [[0, 0], [4, 1], [4, 2], [4, 3], [1, 4]],
    [[4, 0], [2, 1], [1, 2], [0, 3], [3, 4]],
    [[2, 0], [2, 1], [4, 2], [2, 3], [4, 4]],
    [[2, 0], [2, 1], [2, 2], [3, 3], [2, 4]],
    [[4, 0], [1, 1], [3, 2], [1, 3], [3, 4]],
    [[2, 0], [1, 1], [2, 2], [2, 3], [1, 4]],
    [[3, 0], [3, 1], [3, 2], [4, 3], [1, 4]],
    [[0, 0], [4, 1], [4, 2], [3, 3], [2, 4]],
    [[1, 0], [2, 1], [2, 2], [2, 3], [3, 4]],
    [[1, 0], [4, 1], [1, 2], [0, 3], [1, 4]],
    [[2, 0], [0, 1], [3, 2], [3, 3], [1, 4]],
    [[0, 0], [0, 1], [3, 2], [3, 3], [1, 4]],
    [[3, 0], [1, 1], [4, 2], [4, 3], [0, 4]],
    [[4, 0], [0, 1], [0, 2], [4, 3], [1, 4]],
    [[2, 0], [4, 1], [1, 2], [4, 3], [2, 4]],
    [[0, 0], [4, 1], [2, 2], [1, 3], [0, 4]],
    [[2, 0], [0, 1], [4, 2], [3, 3], [4, 4]],
    [[2, 0], [2, 1], [3, 2], [3, 3], [1, 4]],
    [[4, 0], [4, 1], [2, 2], [3, 3], [1, 4]],
    [[0, 0], [2, 1], [3, 2], [3, 3], [4, 4]],
    [[0, 0], [2, 1], [1, 2], [4, 3], [3, 4]],
    [[2, 0], [1, 1], [1, 2], [0, 3], [1, 4]],
    [[0, 0], [1, 1], [0, 2], [4, 3], [1, 4]],
    [[2, 0], [1, 1], [2, 2], [0, 3], [0, 4]],
    [[1, 0], [2, 1], [1, 2], [2, 3], [0, 4]],
    [[4, 0], [0, 1], [0, 2], [2, 3], [2, 4]],
    [[3, 0], [1, 1], [0, 2], [1, 3], [1, 4]],
    [[3, 0], [2, 1], [2, 2], [1, 3], [0, 4]],
    [[1, 0], [4, 1], [3, 2], [2, 3], [0, 4]],
    [[3, 0], [1, 1], [1, 2], [2, 3], [0, 4]],
    [[4, 0], [0, 1], [1, 2], [3, 3], [0, 4]],
    [[2, 0], [0, 1], [1, 2], [4, 3], [1, 4]],
    [[0, 0], [0, 1], [0, 2], [2, 3], [0, 4]],
    [[0, 0], [1, 1], [0, 2], [1, 3], [3, 4]],
    [[2, 0], [0, 1], [2, 2], [0, 3], [3, 4]],
    [[4, 0], [2, 1], [0, 2], [1, 3], [0, 4]],
    [[3, 0], [2, 1], [0, 2], [4, 3], [2, 4]],
    [[3, 0], [4, 1], [1, 2], [0, 3], [4, 4]],
    [[0, 0], [3, 1], [2, 2], [2, 3], [1, 4]],
    [[0, 0], [2, 1], [4, 2], [1, 3], [1, 4]],
    [[3, 0], [4, 1], [2, 2], [2, 3], [4, 4]],
    [[2, 0], [1, 1], [4, 2], [2, 3], [4, 4]],
    [[0, 0], [4, 1], [1, 2], [2, 3], [0, 4]],
    [[3, 0], [3, 1], [1, 2], [3, 3], [2, 4]],
    [[4, 0], [0, 1], [3, 2], [2, 3], [0, 4]],
    [[0, 0], [0, 1], [4, 2], [1, 3], [4, 4]],
    [[3, 0], [0, 1], [3, 2], [4, 3], [2, 4]],
    [[3, 0], [4, 1], [1, 2], [2, 3], [0, 4]],
    [[2, 0], [0, 1], [1, 2], [1, 3], [0, 4]],
    [[3, 0], [3, 1], [1, 2], [4, 3], [1, 4]],
    [[1, 0], [0, 1], [0, 2], [4, 3], [3, 4]],
    [[0, 0], [4, 1], [1, 2], [3, 3], [4, 4]],
    [[3, 0], [0, 1], [0, 2], [4, 3], [1, 4]],
    [[2, 0], [2, 1], [2, 2], [1, 3], [2, 4]],
    [[1, 0], [2, 1], [3, 2], [3, 3], [0, 4]],
    [[0, 0], [1, 1], [2, 2], [1, 3], [0, 4]],
    [[3, 0], [4, 1], [2, 2], [4, 3], [0, 4]],
    [[2, 0], [0, 1], [2, 2], [1, 3], [1, 4]],
    [[0, 0], [1, 1], [1, 2], [0, 3], [0, 4]],
    [[4, 0], [1, 1], [0, 2], [2, 3], [2, 4]],
    [[1, 0], [0, 1], [0, 2], [3, 3], [3, 4]],
    [[1, 0], [2, 1], [4, 2], [4, 3], [0, 4]],
    [[3, 0], [4, 1], [2, 2], [4, 3], [4, 4]],
    [[2, 0], [3, 1], [0, 2], [1, 3], [2, 4]],
    [[4, 0], [1, 1], [0, 2], [3, 3], [1, 4]],
    [[0, 0], [2, 1], [1, 2], [3, 3], [0, 4]],
    [[0, 0], [4, 1], [4, 2], [2, 3], [2, 4]],
    [[2, 0], [0, 1], [0, 2], [2, 3], [3, 4]],
    [[1, 0], [0, 1], [4, 2], [3, 3], [2, 4]],
    [[4, 0], [0, 1], [4, 2], [3, 3], [4, 4]],
    [[2, 0], [3, 1], [1, 2], [0, 3], [4, 4]],
    [[3, 0], [3, 1], [0, 2], [1, 3], [2, 4]],
    [[2, 0], [3, 1], [3, 2], [4, 3], [3, 4]],
    [[3, 0], [1, 1], [4, 2], [3, 3], [3, 4]],
    [[0, 0], [1, 1], [3, 2], [1, 3], [2, 4]],
    [[2, 0], [0, 1], [4, 2], [4, 3], [4, 4]],
    [[3, 0], [0, 1], [2, 2], [2, 3], [4, 4]],
    [[2, 0], [3, 1], [4, 2], [1, 3], [4, 4]],
    [[2, 0], [0, 1], [3, 2], [3, 3], [0, 4]],
    [[4, 0], [0, 1], [2, 2], [3, 3], [1, 4]],
    [[4, 0], [1, 1], [3, 2], [1, 3], [1, 4]],
    [[0, 0], [2, 1], [2, 2], [4, 3], [3, 4]],
    [[1, 0], [3, 1], [3, 2], [0, 3], [1, 4]],
    [[0, 0], [1, 1], [2, 2], [0, 3], [3, 4]],
    [[1, 0], [3, 1], [4, 2], [1, 3], [4, 4]],
    [[0, 0], [2, 1], [0, 2], [3, 3], [2, 4]],
    [[1, 0], [1, 1], [4, 2], [1, 3], [3, 4]],
    [[3, 0], [4, 1], [0, 2], [1, 3], [2, 4]],
    [[4, 0], [1, 1], [3, 2], [4, 3], [0, 4]],
    [[0, 0], [4, 1], [3, 2], [0, 3], [4, 4]],
    [[0, 0], [4, 1], [0, 2], [2, 3], [0, 4]],
    [[4, 0], [3, 1], [2, 2], [0, 3], [1, 4]],
    [[1, 0], [1, 1], [1, 2], [4, 3], [2, 4]],
    [[1, 0], [1, 1], [1, 2], [0, 3], [4, 4]],
    [[4, 0], [0, 1], [3, 2], [2, 3], [2, 4]],
    [[1, 0], [0, 1], [2, 2], [1, 3], [0, 4]],
    [[2, 0], [0, 1], [3, 2], [3, 3], [4, 4]],
    [[4, 0], [0, 1], [4, 2], [1, 3], [3, 4]],
    [[4, 0], [2, 1], [0, 2], [4, 3], [3, 4]],
    [[4, 0], [2, 1], [1, 2], [2, 3], [1, 4]],
    [[4, 0], [3, 1], [0, 2], [2, 3], [4, 4]],
    [[0, 0], [4, 1], [4, 2], [2, 3], [3, 4]],
    [[4, 0], [3, 1], [3, 2], [0, 3], [4, 4]],
    [[0, 0], [4, 1], [0, 2], [4, 3], [1, 4]],
    [[2, 0], [4, 1], [0, 2], [3, 3], [1, 4]],
    [[4, 0], [0, 1], [0, 2], [4, 3], [4, 4]],
    [[4, 0], [3, 1], [3, 2], [0, 3], [2, 4]],
    [[2, 0], [2, 1], [1, 2], [2, 3], [0, 4]],
    [[2, 0], [0, 1], [2, 2], [4, 3], [3, 4]],
    [[0, 0], [0, 1], [3, 2], [0, 3], [3, 4]],
    [[1, 0], [0, 1], [2, 2], [1, 3], [2, 4]],
    [[3, 0], [2, 1], [0, 2], [1, 3], [0, 4]],
    [[4, 0], [1, 1], [0, 2], [0, 3], [3, 4]],
    [[1, 0], [0, 1], [4, 2], [0, 3], [3, 4]],
    [[4, 0], [3, 1], [2, 2], [1, 3], [4, 4]],
    [[0, 0], [3, 1], [3, 2], [2, 3], [4, 4]],
    [[3, 0], [0, 1], [4, 2], [2, 3], [2, 4]],
    [[4, 0], [1, 1], [0, 2], [3, 3], [4, 4]],
    [[1, 0], [3, 1], [2, 2], [2, 3], [1, 4]],
    [[2, 0], [0, 1], [2, 2], [0, 3], [0, 4]],
    [[4, 0], [3, 1], [1, 2], [0, 3], [0, 4]],
    [[3, 0], [4, 1], [4, 2], [3, 3], [2, 4]],
    [[0, 0], [0, 1], [4, 2], [2, 3], [3, 4]],
    [[0, 0], [4, 1], [4, 2], [4, 3], [2, 4]],
    [[3, 0], [0, 1], [4, 2], [4, 3], [1, 4]],
    [[3, 0], [3, 1], [4, 2], [0, 3], [2, 4]],
    [[0, 0], [1, 1], [3, 2], [1, 3], [1, 4]],
    [[0, 0], [2, 1], [0, 2], [0, 3], [2, 4]],
    [[2, 0], [1, 1], [2, 2], [1, 3], [0, 4]],
    [[0, 0], [1, 1], [0, 2], [2, 3], [4, 4]],
    [[0, 0], [4, 1], [2, 2], [1, 3], [4, 4]],
    [[2, 0], [4, 1], [0, 2], [4, 3], [3, 4]],
    [[1, 0], [1, 1], [4, 2], [0, 3], [2, 4]],
    [[4, 0], [0, 1], [3, 2], [2, 3], [3, 4]],
    [[2, 0], [0, 1], [2, 2], [0, 3], [1, 4]],
    [[1, 0], [3, 1], [1, 2], [4, 3], [0, 4]],
    [[0, 0], [4, 1], [4, 2], [0, 3], [1, 4]],
    [[4, 0], [1, 1], [1, 2], [3, 3], [3, 4]],
    [[0, 0], [1, 1], [4, 2], [4, 3], [0, 4]],
    [[3, 0], [0, 1], [2, 2], [1, 3], [0, 4]],
    [[1, 0], [1, 1], [2, 2], [3, 3], [3, 4]],
    [[4, 0], [1, 1], [4, 2], [0, 3], [3, 4]],
    [[3, 0], [2, 1], [1, 2], [1, 3], [4, 4]],
    [[1, 0], [4, 1], [0, 2], [3, 3], [3, 4]],
    [[4, 0], [2, 1], [4, 2], [4, 3], [2, 4]],
    [[3, 0], [2, 1], [2, 2], [2, 3], [2, 4]],
    [[1, 0], [4, 1], [0, 2], [3, 3], [4, 4]],
    [[1, 0], [4, 1], [1, 2], [4, 3], [3, 4]],
    [[4, 0], [1, 1], [1, 2], [0, 3], [1, 4]],
    [[0, 0], [0, 1], [4, 2], [3, 3], [0, 4]],
    [[2, 0], [2, 1], [2, 2], [3, 3], [1, 4]],
    [[3, 0], [0, 1], [0, 2], [3, 3], [0, 4]],
    [[2, 0], [4, 1], [0, 2], [1, 3], [0, 4]],
    [[0, 0], [2, 1], [4, 2], [2, 3], [4, 4]],
    [[2, 0], [1, 1], [0, 2], [2, 3], [1, 4]],
    [[4, 0], [0, 1], [0, 2], [0, 3], [2, 4]],
    [[2, 0], [2, 1], [3, 2], [0, 3], [4, 4]],
    [[1, 0], [1, 1], [2, 2], [3, 3], [4, 4]],
    [[1, 0], [0, 1], [1, 2], [0, 3], [4, 4]],
    [[1, 0], [4, 1], [2, 2], [3, 3], [3, 4]],
    [[2, 0], [1, 1], [1, 2], [4, 3], [4, 4]],
    [[3, 0], [3, 1], [4, 2], [4, 3], [1, 4]],
    [[0, 0], [2, 1], [2, 2], [2, 3], [3, 4]],
    [[1, 0], [3, 1], [4, 2], [2, 3], [3, 4]],
    [[1, 0], [4, 1], [4, 2], [0, 3], [2, 4]],
    [[3, 0], [3, 1], [3, 2], [4, 3], [3, 4]],
    [[1, 0], [3, 1], [4, 2], [3, 3], [3, 4]],
    [[0, 0], [2, 1], [2, 2], [3, 3], [1, 4]],
    [[4, 0], [3, 1], [2, 2], [1, 3], [3, 4]],
    [[3, 0], [3, 1], [2, 2], [0, 3], [4, 4]],
    [[3, 0], [1, 1], [4, 2], [4, 3], [2, 4]],
    [[4, 0], [2, 1], [4, 2], [3, 3], [2, 4]],
    [[3, 0], [3, 1], [2, 2], [0, 3], [3, 4]],
    [[4, 0], [4, 1], [1, 2], [3, 3], [4, 4]],
    [[1, 0], [1, 1], [0, 2], [2, 3], [2, 4]],
    [[2, 0], [1, 1], [2, 2], [4, 3], [1, 4]],
    [[4, 0], [4, 1], [2, 2], [2, 3], [4, 4]],
    [[1, 0], [3, 1], [3, 2], [4, 3], [2, 4]],
    [[4, 0], [4, 1], [1, 2], [2, 3], [3, 4]],
    [[4, 0], [0, 1], [2, 2], [4, 3], [2, 4]],
    [[3, 0], [4, 1], [4, 2], [1, 3], [1, 4]],
    [[0, 0], [1, 1], [4, 2], [3, 3], [2, 4]],
    [[1, 0], [0, 1], [3, 2], [4, 3], [2, 4]],
    [[3, 0], [1, 1], [2, 2], [2, 3], [3, 4]],
    [[0, 0], [1, 1], [1, 2], [0, 3], [3, 4]],
    [[2, 0], [3, 1], [3, 2], [1, 3], [1, 4]],
    [[0, 0], [2, 1], [2, 2], [2, 3], [1, 4]],
    [[3, 0], [4, 1], [1, 2], [3, 3], [0, 4]],
    [[0, 0], [1, 1], [1, 2], [0, 3], [1, 4]],
    [[1, 0], [3, 1], [1, 2], [3, 3], [2, 4]],
    [[2, 0], [1, 1], [1, 2], [3, 3], [0, 4]],
    [[4, 0], [1, 1], [1, 2], [2, 3], [2, 4]],
    [[1, 0], [1, 1], [1, 2], [2, 3], [3, 4]],
    [[2, 0], [3, 1], [0, 2], [2, 3], [1, 4]],
    [[4, 0], [1, 1], [0, 2], [4, 3], [2, 4]],
    [[2, 0], [4, 1], [4, 2], [0, 3], [4, 4]],
    [[0, 0], [1, 1], [3, 2], [3, 3], [3, 4]],
    [[1, 0], [4, 1], [4, 2], [2, 3], [1, 4]],
    [[3, 0], [2, 1], [0, 2], [1, 3], [3, 4]],
    [[1, 0], [3, 1], [0, 2], [4, 3], [1, 4]],
    [[3, 0], [2, 1], [3, 2], [4, 3], [0, 4]],
    [[4, 0], [2, 1], [1, 2], [4, 3], [4, 4]],
    [[0, 0], [0, 1], [4, 2], [0, 3], [4, 4]],
    [[4, 0], [4, 1], [3, 2], [1, 3], [1, 4]],
    [[0, 0], [3, 1], [1, 2], [2, 3], [0, 4]],
    [[4, 0], [2, 1], [1, 2], [2, 3], [4, 4]],
    [[0, 0], [3, 1], [3, 2], [0, 3], [0, 4]],
    [[3, 0], [3, 1], [2, 2], [3, 3], [4, 4]],
    [[0, 0], [2, 1], [0, 2], [3, 3], [1, 4]],
    [[4, 0], [4, 1], [1, 2], [2, 3], [2, 4]],
    [[3, 0], [1, 1], [4, 2], [0, 3], [3, 4]],
    [[3, 0], [0, 1], [4, 2], [1, 3], [1, 4]],
    [[4, 0], [2, 1], [3, 2], [0, 3], [4, 4]],
    [[0, 0], [4, 1], [2, 2], [4, 3], [4, 4]],
    [[0, 0], [0, 1], [0, 2], [2, 3], [2, 4]],
    [[2, 0], [3, 1], [3, 2], [3, 3], [3, 4]],
    [[1, 0], [2, 1], [1, 2], [1, 3], [2, 4]],
    [[3, 0], [0, 1], [3, 2], [3, 3], [1, 4]],
    [[2, 0], [1, 1], [3, 2], [2, 3], [0, 4]],
    [[0, 0], [4, 1], [1, 2], [4, 3], [2, 4]],
    [[4, 0], [0, 1], [3, 2], [4, 3], [3, 4]],
    [[1, 0], [3, 1], [3, 2], [1, 3], [4, 4]],
    [[4, 0], [2, 1], [0, 2], [0, 3], [1, 4]],
    [[3, 0], [4, 1], [1, 2], [0, 3], [1, 4]],
    [[2, 0], [3, 1], [0, 2], [2, 3], [4, 4]],
    [[1, 0], [4, 1], [0, 2], [1, 3], [1, 4]],
    [[4, 0], [0, 1], [0, 2], [1, 3], [1, 4]],
    [[3, 0], [0, 1], [3, 2], [1, 3], [2, 4]],
    [[1, 0], [1, 1], [2, 2], [1, 3], [2, 4]],
    [[4, 0], [4, 1], [0, 2], [0, 3], [3, 4]],
    [[2, 0], [0, 1], [0, 2], [0, 3], [2, 4]],
    [[3, 0], [2, 1], [1, 2], [4, 3], [1, 4]],
    [[4, 0], [2, 1], [4, 2], [4, 3], [3, 4]],
    [[0, 0], [0, 1], [3, 2], [0, 3], [1, 4]],
    [[3, 0], [4, 1], [3, 2], [0, 3], [1, 4]],
    [[1, 0], [3, 1], [3, 2], [4, 3], [0, 4]],
    [[3, 0], [3, 1], [1, 2], [1, 3], [4, 4]],
    [[1, 0], [2, 1], [0, 2], [4, 3], [0, 4]],
    [[3, 0], [2, 1], [3, 2], [3, 3], [4, 4]],
    [[1, 0], [3, 1], [4, 2], [1, 3], [0, 4]],
    [[1, 0], [3, 1], [4, 2], [2, 3], [0, 4]],
    [[3, 0], [0, 1], [2, 2], [0, 3], [2, 4]],
    [[0, 0], [0, 1], [3, 2], [2, 3], [4, 4]],
    [[4, 0], [0, 1], [0, 2], [3, 3], [2, 4]],
    [[1, 0], [1, 1], [2, 2], [4, 3], [3, 4]],
    [[1, 0], [3, 1], [3, 2], [0, 3], [3, 4]],
    [[1, 0], [2, 1], [4, 2], [0, 3], [2, 4]],
    [[4, 0], [2, 1], [3, 2], [3, 3], [0, 4]],
    [[4, 0], [2, 1], [0, 2], [3, 3], [2, 4]],
    [[1, 0], [3, 1], [1, 2], [3, 3], [0, 4]],
    [[3, 0], [3, 1], [3, 2], [1, 3], [3, 4]],
    [[1, 0], [3, 1], [1, 2], [4, 3], [4, 4]],
    [[3, 0], [3, 1], [1, 2], [0, 3], [2, 4]],
    [[1, 0], [4, 1], [0, 2], [2, 3], [2, 4]],
    [[4, 0], [4, 1], [3, 2], [2, 3], [2, 4]],
    [[4, 0], [4, 1], [1, 2], [3, 3], [3, 4]],
    [[1, 0], [1, 1], [0, 2], [1, 3], [3, 4]],
    [[2, 0], [2, 1], [1, 2], [1, 3], [1, 4]],
    [[3, 0], [1, 1], [1, 2], [1, 3], [0, 4]],
    [[3, 0], [4, 1], [3, 2], [3, 3], [1, 4]],
    [[3, 0], [1, 1], [0, 2], [0, 3], [0, 4]],
    [[1, 0], [1, 1], [3, 2], [2, 3], [2, 4]],
    [[4, 0], [3, 1], [4, 2], [1, 3], [2, 4]],
    [[3, 0], [1, 1], [4, 2], [3, 3], [2, 4]],
    [[2, 0], [4, 1], [2, 2], [2, 3], [3, 4]],
    [[4, 0], [1, 1], [4, 2], [1, 3], [1, 4]],
    [[3, 0], [0, 1], [4, 2], [2, 3], [0, 4]],
    [[3, 0], [4, 1], [1, 2], [4, 3], [1, 4]],
    [[2, 0], [2, 1], [4, 2], [1, 3], [2, 4]],
    [[3, 0], [0, 1], [2, 2], [3, 3], [0, 4]],
    [[3, 0], [1, 1], [1, 2], [1, 3], [1, 4]],
    [[2, 0], [0, 1], [3, 2], [0, 3], [1, 4]],
    [[4, 0], [1, 1], [1, 2], [4, 3], [2, 4]],
    [[0, 0], [0, 1], [2, 2], [0, 3], [1, 4]],
    [[3, 0], [4, 1], [2, 2], [4, 3], [3, 4]],
    [[1, 0], [0, 1], [3, 2], [4, 3], [3, 4]],
    [[0, 0], [2, 1], [0, 2], [2, 3], [1, 4]],
    [[0, 0], [1, 1], [0, 2], [1, 3], [1, 4]],
    [[2, 0], [0, 1], [2, 2], [3, 3], [3, 4]],
    [[1, 0], [0, 1], [3, 2], [3, 3], [4, 4]],
    [[0, 0], [2, 1], [2, 2], [1, 3], [1, 4]],
    [[2, 0], [2, 1], [1, 2], [4, 3], [0, 4]],
    [[4, 0], [4, 1], [1, 2], [1, 3], [3, 4]],
    [[0, 0], [4, 1], [3, 2], [1, 3], [2, 4]],
    [[4, 0], [0, 1], [1, 2], [2, 3], [1, 4]],
    [[2, 0], [3, 1], [2, 2], [3, 3], [2, 4]],
    [[3, 0], [0, 1], [4, 2], [4, 3], [4, 4]],
    [[1, 0], [4, 1], [2, 2], [2, 3], [4, 4]],
    [[3, 0], [4, 1], [0, 2], [3, 3], [0, 4]],
    [[2, 0], [4, 1], [0, 2], [3, 3], [3, 4]],
    [[0, 0], [4, 1], [2, 2], [1, 3], [1, 4]],
    [[2, 0], [0, 1], [1, 2], [3, 3], [3, 4]],
    [[0, 0], [4, 1], [2, 2], [2, 3], [4, 4]],
    [[2, 0], [3, 1], [2, 2], [1, 3], [4, 4]],
    [[2, 0], [0, 1], [1, 2], [4, 3], [2, 4]],
    [[2, 0], [0, 1], [2, 2], [3, 3], [2, 4]],
    [[4, 0], [2, 1], [3, 2], [2, 3], [2, 4]],
    [[4, 0], [0, 1], [3, 2], [3, 3], [3, 4]],
    [[1, 0], [3, 1], [2, 2], [3, 3], [1, 4]],
    [[3, 0], [0, 1], [1, 2], [4, 3], [0, 4]],
    [[0, 0], [4, 1], [2, 2], [4, 3], [3, 4]],
    [[4, 0], [3, 1], [3, 2], [4, 3], [1, 4]],
    [[1, 0], [4, 1], [1, 2], [2, 3], [3, 4]],
    [[2, 0], [4, 1], [3, 2], [2, 3], [4, 4]],
    [[3, 0], [1, 1], [2, 2], [3, 3], [0, 4]],
    [[2, 0], [4, 1], [2, 2], [4, 3], [0, 4]],
    [[3, 0], [2, 1], [4, 2], [1, 3], [2, 4]],
    [[1, 0], [0, 1], [0, 2], [2, 3], [0, 4]],
    [[1, 0], [1, 1], [0, 2], [3, 3], [2, 4]],
    [[1, 0], [1, 1], [3, 2], [2, 3], [0, 4]],
    [[2, 0], [4, 1], [1, 2], [2, 3], [0, 4]],
    [[3, 0], [1, 1], [1, 2], [2, 3], [1, 4]],
    [[0, 0], [1, 1], [1, 2], [1, 3], [1, 4]],
    [[3, 0], [2, 1], [1, 2], [1, 3], [3, 4]],
    [[0, 0], [1, 1], [0, 2], [1, 3], [0, 4]],
    [[4, 0], [2, 1], [0, 2], [2, 3], [3, 4]],
    [[2, 0], [1, 1], [2, 2], [3, 3], [1, 4]],
    [[4, 0], [1, 1], [1, 2], [1, 3], [0, 4]],
    [[4, 0], [2, 1], [4, 2], [4, 3], [4, 4]],
    [[0, 0], [2, 1], [2, 2], [2, 3], [2, 4]],
    [[3, 0], [1, 1], [2, 2], [0, 3], [3, 4]],
    [[0, 0], [1, 1], [0, 2], [4, 3], [0, 4]],
    [[1, 0], [0, 1], [2, 2], [3, 3], [2, 4]],
    [[2, 0], [4, 1], [1, 2], [4, 3], [3, 4]],
    [[4, 0], [1, 1], [2, 2], [4, 3], [2, 4]],
    [[2, 0], [0, 1], [3, 2], [0, 3], [2, 4]],
    [[4, 0], [4, 1], [2, 2], [3, 3], [4, 4]],
    [[3, 0], [3, 1], [2, 2], [3, 3], [0, 4]],
    [[3, 0], [2, 1], [2, 2], [4, 3], [4, 4]],
    [[0, 0], [1, 1], [0, 2], [0, 3], [2, 4]],
    [[0, 0], [0, 1], [2, 2], [2, 3], [3, 4]],
    [[4, 0], [1, 1], [1, 2], [1, 3], [4, 4]],
    [[2, 0], [1, 1], [3, 2], [0, 3], [0, 4]],
    [[3, 0], [1, 1], [2, 2], [1, 3], [4, 4]],
    [[0, 0], [0, 1], [2, 2], [4, 3], [0, 4]],
    [[3, 0], [0, 1], [0, 2], [3, 3], [3, 4]],
    [[2, 0], [1, 1], [1, 2], [3, 3], [1, 4]],
    [[2, 0], [3, 1], [3, 2], [1, 3], [4, 4]],
    [[3, 0], [3, 1], [3, 2], [4, 3], [0, 4]],
    [[2, 0], [3, 1], [4, 2], [3, 3], [0, 4]],
    [[2, 0], [1, 1], [3, 2], [0, 3], [3, 4]],
    [[0, 0], [2, 1], [1, 2], [2, 3], [1, 4]],
    [[4, 0], [0, 1], [3, 2], [4, 3], [0, 4]],
    [[3, 0], [3, 1], [4, 2], [1, 3], [3, 4]],
    [[3, 0], [3, 1], [3, 2], [0, 3], [4, 4]],
    [[1, 0], [4, 1], [1, 2], [4, 3], [2, 4]],
    [[0, 0], [4, 1], [4, 2], [4, 3], [4, 4]],
    [[3, 0], [0, 1], [2, 2], [3, 3], [2, 4]],
    [[1, 0], [1, 1], [2, 2], [1, 3], [1, 4]],
    [[0, 0], [1, 1], [1, 2], [1, 3], [0, 4]],
    [[2, 0], [4, 1], [3, 2], [4, 3], [2, 4]],
    [[3, 0], [3, 1], [0, 2], [2, 3], [2, 4]],
    [[1, 0], [1, 1], [2, 2], [2, 3], [1, 4]],
    [[0, 0], [3, 1], [0, 2], [4, 3], [3, 4]],
    [[1, 0], [4, 1], [1, 2], [1, 3], [1, 4]],
    [[1, 0], [0, 1], [4, 2], [2, 3], [1, 4]],
    [[2, 0], [4, 1], [2, 2], [2, 3], [0, 4]],
    [[0, 0], [4, 1], [3, 2], [4, 3], [0, 4]],
    [[3, 0], [4, 1], [3, 2], [2, 3], [4, 4]],
    [[4, 0], [1, 1], [3, 2], [2, 3], [2, 4]],
    [[1, 0], [3, 1], [3, 2], [3, 3], [3, 4]],
    [[3, 0], [4, 1], [2, 2], [1, 3], [2, 4]],
    [[4, 0], [0, 1], [4, 2], [4, 3], [0, 4]],
    [[2, 0], [2, 1], [1, 2], [1, 3], [3, 4]],
    [[1, 0], [2, 1], [1, 2], [4, 3], [3, 4]],
    [[4, 0], [0, 1], [3, 2], [4, 3], [1, 4]],
    [[4, 0], [0, 1], [0, 2], [2, 3], [3, 4]],
    [[2, 0], [0, 1], [0, 2], [3, 3], [4, 4]],
    [[1, 0], [0, 1], [3, 2], [0, 3], [2, 4]],
    [[0, 0], [4, 1], [4, 2], [2, 3], [0, 4]],
    [[1, 0], [2, 1], [3, 2], [4, 3], [1, 4]],
    [[3, 0], [2, 1], [3, 2], [2, 3], [2, 4]],
    [[3, 0], [4, 1], [1, 2], [4, 3], [0, 4]],
    [[1, 0], [4, 1], [3, 2], [3, 3], [4, 4]],
    [[4, 0], [4, 1], [3, 2], [3, 3], [2, 4]],
    [[0, 0], [2, 1], [3, 2], [4, 3], [4, 4]],
    [[1, 0], [4, 1], [4, 2], [4, 3], [2, 4]],
    [[2, 0], [2, 1], [0, 2], [1, 3], [4, 4]],
    [[2, 0], [2, 1], [0, 2], [2, 3], [3, 4]],
    [[1, 0], [2, 1], [0, 2], [0, 3], [2, 4]],
    [[0, 0], [3, 1], [4, 2], [3, 3], [1, 4]],
    [[2, 0], [3, 1], [0, 2], [4, 3], [0, 4]],
    [[4, 0], [3, 1], [1, 2], [4, 3], [0, 4]],
    [[2, 0], [0, 1], [2, 2], [1, 3], [4, 4]],
    [[4, 0], [1, 1], [4, 2], [3, 3], [1, 4]],
    [[1, 0], [2, 1], [1, 2], [4, 3], [0, 4]],
    [[0, 0], [0, 1], [2, 2], [1, 3], [1, 4]],
    [[0, 0], [2, 1], [1, 2], [4, 3], [4, 4]],
    [[0, 0], [2, 1], [3, 2], [2, 3], [3, 4]],
    [[0, 0], [4, 1], [3, 2], [0, 3], [3, 4]],
    [[0, 0], [2, 1], [0, 2], [1, 3], [4, 4]],
    [[3, 0], [3, 1], [0, 2], [4, 3], [2, 4]],
    [[3, 0], [0, 1], [3, 2], [0, 3], [0, 4]],
    [[2, 0], [2, 1], [3, 2], [2, 3], [3, 4]],
    [[3, 0], [3, 1], [4, 2], [0, 3], [3, 4]],
    [[2, 0], [1, 1], [3, 2], [3, 3], [4, 4]],
    [[2, 0], [4, 1], [4, 2], [2, 3], [0, 4]],
    [[1, 0], [2, 1], [4, 2], [0, 3], [0, 4]],
    [[2, 0], [4, 1], [2, 2], [0, 3], [2, 4]],
    [[1, 0], [3, 1], [0, 2], [0, 3], [3, 4]],
    [[1, 0], [1, 1], [0, 2], [4, 3], [2, 4]],
    [[2, 0], [1, 1], [4, 2], [4, 3], [0, 4]],
    [[1, 0], [2, 1], [3, 2], [2, 3], [2, 4]],
    [[1, 0], [0, 1], [2, 2], [2, 3], [0, 4]],
    [[2, 0], [0, 1], [3, 2], [1, 3], [1, 4]],
    [[2, 0], [4, 1], [4, 2], [3, 3], [2, 4]],
    [[0, 0], [1, 1], [1, 2], [4, 3], [4, 4]],
    [[1, 0], [0, 1], [1, 2], [2, 3], [1, 4]],
    [[4, 0], [3, 1], [3, 2], [4, 3], [2, 4]],
    [[3, 0], [0, 1], [0, 2], [2, 3], [1, 4]],
    [[1, 0], [3, 1], [0, 2], [0, 3], [4, 4]],
    [[0, 0], [4, 1], [0, 2], [1, 3], [0, 4]],
    [[0, 0], [2, 1], [1, 2], [1, 3], [4, 4]],
    [[4, 0], [0, 1], [4, 2], [3, 3], [3, 4]],
    [[0, 0], [1, 1], [1, 2], [3, 3], [0, 4]],
    [[3, 0], [3, 1], [3, 2], [3, 3], [0, 4]],
    [[4, 0], [1, 1], [4, 2], [2, 3], [1, 4]],
    [[3, 0], [4, 1], [0, 2], [2, 3], [0, 4]],
    [[1, 0], [2, 1], [3, 2], [4, 3], [0, 4]],
    [[1, 0], [3, 1], [4, 2], [2, 3], [2, 4]],
    
];

// Instantiate SlotMachine
let reels = [];
for (let i = 0; i < 5; i++) {
    reels.push(new Reel(symbols));
}
let slotMachine = new SlotMachine(reels, paylines, 1000, 10, 50);
slotMachine.displayInitialSymbols();

// Event Listeners
document.getElementById('spinButton').addEventListener('click', () => {
    if (slotMachine.winRate === 100) {
        slotMachine.ensureWinningSpin();
    }
    slotMachine.spinReels();
});

document.getElementById('betIncrease').addEventListener('click', () => {
    if (slotMachine.bet < MAX_BET && slotMachine.bet < slotMachine.balance) {
        slotMachine.bet += 10;
        updateInfo(slotMachine.balance, slotMachine.bet, slotMachine.win, slotMachine.winRate);
    }
});

document.getElementById('betDecrease').addEventListener('click', () => {
    if (slotMachine.bet > MIN_BET) {
        slotMachine.bet -= 10;
        updateInfo(slotMachine.balance, slotMachine.bet, slotMachine.win, slotMachine.winRate);
    }
});

const autoPlayButton = document.getElementById('autoPlayButton');
autoPlayButton.addEventListener('click', () => {
    slotMachine.autoSpinning = !slotMachine.autoSpinning;
    if (slotMachine.autoSpinning) {
        autoPlayButton.textContent = 'Stop';
        autoPlayButton.classList.add('btn-auto-play');
        autoPlayButton.classList.remove('btn-outline-success');
        slotMachine.spinReels();
    } else {
        autoPlayButton.textContent = 'Auto';
        autoPlayButton.classList.remove('btn-auto-play');
        autoPlayButton.classList.add('btn-outline-success');
    }
});

document.getElementById('winRateSlider').addEventListener('input', (event) => {
    let winRate = parseInt(event.target.value, 10);
    if (winRate < MIN_WIN_RATE) {
        winRate = MIN_WIN_RATE;
        event.target.value = winRate;
    }
    slotMachine.setWinRate(winRate);
    document.getElementById('winRateDisplay').innerHTML = `Win Rate: ${winRate}%`;
});

document.getElementById('themeToggle').addEventListener('change', (event) => {
    document.body.classList.toggle('light-mode', event.target.checked);
});

function updateInfo(balance, bet, win, winRate) {
    document.getElementById('balance').innerHTML = `Balance: $${balance}`;
    document.getElementById('betAmount').innerHTML = `Bet: $${bet}`;
    document.getElementById('winAmount').innerHTML = `Win: $${win}`;
    document.getElementById('winRateDisplay').innerHTML = `Win Rate: ${winRate}%`;
}

function clearHighlight() {
    let symbolDivs = document.querySelectorAll('.symbol');
    symbolDivs.forEach(div => {
        div.classList.remove('highlight');
        div.style.opacity = 1;
    });
}

function highlightWinningSymbols(grid, winningLines) {
    for (let line of winningLines) {
        for (let pos of line) {
            let reel = document.getElementById(`reel${pos[1] + 1}`);
            let symbolDivs = reel.getElementsByClassName('symbol');
            let symbolDiv = symbolDivs[pos[0]];
            symbolDiv.classList.add('highlight');
            symbolDiv.style.animation = 'pulse 1s infinite';
            console.log(`Highlighted Symbol: Row ${pos[0] + 1}, Reel ${pos[1] + 1}, Emoji: ${symbolDiv.innerHTML}`);
        }
    }
}
